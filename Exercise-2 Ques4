abstract class Author {
    var name: String = "Default name"
    var type: String = "Default type"
    
    val fullName: String
        get() = "$name of type $type"
}

class BookTitle: Author()
class Best: Author()

interface Book {
    var name: String
        get() = names[this] ?: "Default name"
        set(value) { names[this] = value }

    var type: String
        get() = types[this] ?: "Default type"
        set(value) { types[this] = value }

    val fullName: String
        get() = "$name of type $type"

    companion object {
         private val names = mutableMapOf<Any, String>()
         private val types = mutableMapOf<Any, String>()
    }
}

class Type: Book
class Price: Book

fun main(args:Array<String>) {
    val BookTitle = BookTitle()
    BookTitle.name = "Computers"
    BookTitle.type = "Networking"

    val best = Best()
    best.name = "ABC"
    BookTitle.type = "Computers"

    print(BookTitle.fullName) 
    print(best.fullName) 

    val type = Type()
    type.name = "Data communications and Networking"
    type.type = "Engineering"

    val dog = Dog()
    price.name = "900"
    price.type = "expensive"

    print(type.fullName) 
    print(price.fullName)
}
